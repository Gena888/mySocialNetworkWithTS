{"version":3,"sources":["Login/Login.module.css","Login/Login.tsx"],"names":["module","exports","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","setErrorThunk","inStateError","className","s","loginForm","onSubmit","createField","required","Input","buttonAndRemember","loginButton","rememberMeDiv","undefined","formSummeryError","connect","state","isAuth","auth","LoginThunk","to","loginInner","formData","email","password","rememberMe","captcha","src","alt"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,iBAAmB,gCAAgC,QAAU,uBAAuB,WAAa,0BAA0B,YAAc,2BAA2B,kBAAoB,iCAAiC,cAAgB,+B,6HCqDrPC,EAAiBC,YAAkD,CACrEC,KAAM,SADaD,EA5BoF,SAAC,GAAsE,IAApEE,EAAmE,EAAnEA,aAAcC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAC1J,OACI,uBAAMC,UAAWC,IAAEC,UAAWC,SAAUR,EAAxC,UAEKS,YAAqC,CAACC,KAAW,QAASC,IAAO,QAAS,QAC1EF,YAAqC,CAACC,KAAW,WAAYC,IAAO,WAAY,QAEhFT,GAAcO,YAAqC,CAACC,KAAW,SAAUC,IAAO,UAAW,QAC5F,sBAAKN,UAAWC,IAAEM,kBAAlB,UACI,qBAAKP,UAAWC,IAAEO,YAAlB,SACI,6CAEJ,qBAAKR,UAAWC,IAAEQ,cAAlB,SACI,kCACKL,YAAqC,QAAIM,EAAWJ,IAAO,aAAc,YAC1E,uDAIXV,EAAQE,EAAcF,GAAS,KAChC,qBAAKI,UAAWD,GAAgBF,EAAaI,IAAEU,iBAAmB,GAAlE,SACKZ,GAAgBF,GAAc,8BAAME,YAsDtCa,uBAPS,SAACC,GAAD,MAA6C,CACjEC,OAAQD,EAAME,KAAKD,OACnBjB,WAAYgB,EAAME,KAAKlB,WACvBE,aAAcc,EAAME,KAAKhB,gBAIW,CAAEiB,eAAYlB,mBAAvCc,EAhCkD,SAAC,GAAqE,IAAnEI,EAAkE,EAAlEA,WAAYF,EAAsD,EAAtDA,OAAQjB,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAK/G,OAAIe,EACO,cAAC,IAAD,CAAUG,GAAI,aAIrB,sBAAKjB,UAAWC,IAAEiB,WAAlB,UACI,uCACA,cAAC1B,EAAD,CACIW,SAXK,SAACgB,GACdH,EAAWG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAWpE1B,WAAYA,EACZC,cAAeA,EACfC,aAAcA,IAElB,8BACKF,GAAc,qBAAKG,UAAWC,IAAEsB,QAASC,IAAK3B,EAAY4B,IAAI","file":"static/js/3.25618e66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummeryError\":\"Login_formSummeryError__3oPzO\",\"captcha\":\"Login_captcha__-t4l9\",\"loginInner\":\"Login_loginInner__2TCO8\",\"loginButton\":\"Login_loginButton__1siJB\",\"buttonAndRemember\":\"Login_buttonAndRemember__1Hhl2\",\"rememberMeDiv\":\"Login_rememberMeDiv__3rHT9\"};","import React from 'react';\r\nimport { InjectedFormProps, reduxForm, submit } from 'redux-form';\r\nimport { Input } from '../components/Common/FormsControls/FormsControls';\r\nimport { required } from '../Utils/Validators/Validaors';\r\nimport { LoginThunk, setErrorThunk } from '../redux/auth-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport s from './Login.module.css'\r\nimport { createField } from '../components/Common/FormsControls/FormsControls';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n    setErrorThunk: (error: string | null) => void\r\n    inStateError: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl, setErrorThunk, inStateError }) => {\r\n    return (\r\n        <form className={s.loginForm} onSubmit={handleSubmit}>\r\n            {/* createField = (validate, placeholder, component, name, type) */}\r\n            {createField<LoginFormValuesTypeKeys>([required], 'Email', Input, 'email', 'text')}\r\n            {createField<LoginFormValuesTypeKeys>([required], 'Password', Input, 'password', 'text')}\r\n\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>([required], 'Captha', Input, 'captcha', 'text')}\r\n            <div className={s.buttonAndRemember}>\r\n                <div className={s.loginButton}>\r\n                    <button>LOGIN</button>\r\n                </div>\r\n                <div className={s.rememberMeDiv}>\r\n                    <label >\r\n                        {createField<LoginFormValuesTypeKeys>([], undefined, Input, 'rememberMe', 'checkbox')}\r\n                        <span>remember me</span>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            {error ? setErrorThunk(error) : null}\r\n            <div className={inStateError || captchaUrl ? s.formSummeryError : ''}>\r\n                {inStateError || captchaUrl && <div>{inStateError}</div>}\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n    inStateError: string | null\r\n}\r\n\r\ntype MapDispatcPropsType = {\r\n    LoginThunk: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    setErrorThunk: (error: string | null) => void\r\n}\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatcPropsType> = ({ LoginThunk, isAuth, captchaUrl, setErrorThunk, inStateError }) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        LoginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginInner}>\r\n            <h1>login</h1>\r\n            <LoginReduxForm\r\n                onSubmit={onSubmit}\r\n                captchaUrl={captchaUrl}\r\n                setErrorThunk={setErrorThunk}\r\n                inStateError={inStateError}\r\n            />\r\n            <div>\r\n                {captchaUrl && <img className={s.captcha} src={captchaUrl} alt=\"captchaImg\" />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n    inStateError: state.auth.inStateError\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, { LoginThunk, setErrorThunk })(Login);"],"sourceRoot":""}